#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void bubble_sort(int arr[], int n);
void selection_sort(int arr[], int n);
void merge_sort(int arr[], int left, int right);
void merge(int arr[], int left, int mid, int right);
void swap(int *a, int *b);

int main(void)
{
    int arr1[SIZE], arr2[SIZE], arr3[SIZE];
    
    srand(time(NULL));
    for (int i = 0; i < SIZE; i++)
    {
        int num = rand() % 10000;
        arr1[i] = arr2[i] = arr3[i] = num;
    }

    clock_t start, end;

    start = clock();
    bubble_sort(arr1, SIZE);
    end = clock();
    printf("Bubble Sort Time: %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    selection_sort(arr2, SIZE);
    end = clock();
    printf("Selection Sort Time: %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    merge_sort(arr3, 0, SIZE - 1);
    end = clock();
    printf("Merge Sort Time: %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
}

void bubble_sort(int arr[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

void selection_sort(int arr[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        int min_idx = i;
        for (int j = i + 1; j < n; j++)
        {
            if (arr[j] < arr[min_idx])
            {
                min_idx = j;
            }
        }
        swap(&arr[i], &arr[min_idx]);
    }
}

void merge_sort(int arr[], int left, int right)
{
    if (left < right)
    {
        int mid = left + (right - left) / 2;
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void merge(int arr[], int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}